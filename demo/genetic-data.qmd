---
title: "Genetic data"
format: html
editor: visual
---

# Data preparation

## Imports

```{r}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
```

```{r}
library("psych")
```

## Loading the data

```{r}
CANVAS <- read.csv("../data/GSE127711_series_matrix.txt", header = FALSE, row.names = c(1), sep = "\t", na.strings = c("", "N/A"), skip = 95)
```

Extract data at XX visit and extract diagnosis.

```{r}
diagnosis <- c(
  "SZ", "SZ", "SZ", "SZA", "SZA", "SZA", "SZ", "SZ", "SZA", "SZA", "SZA",
  "SZA", "SZA", "SZA", "SZA", "SZA", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ",
  "SZ", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "BP", "BP", "BP", "BP",
  "BP", "BP", "BP", "BP", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA",
  "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA",
  "SZ", "SZ", "SZ", "BP", "BP", "BP", "BP", "BP", "BP", "SZ", "SZ", "SZ",
  "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZA", "SZA", "SZA", "BP", "BP", "SZ",
  "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZA", "SZA", "SZA",
  "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "BP", "BP", "BP", "BP",
  "BP", "BP", "SZ", "SZ", "SZ", "BP", "BP", "BP", "BP", "SZA", "SZA", "SZA",
  "SZ", "SZ", "SZ", "SZA", "SZA", "SZA", "BP", "BP", "BP", "BP", "BP", "SZA",
  "SZA", "SZA", "SZA", "SZA", "BP", "BP", "BP", "BP", "BP", "BP", "SZ", "SZ",
  "SZ", "BP", "BP", "BP", "SZ", "SZ", "BP", "BP", "BP", "BP", "BP", "BP",
  "BP", "BP", "SZA", "SZA", "SZA", "SZA", "SZA", "MOOD", "MOOD", "MOOD",
  "BP", "BP", "SZA", "SZA", "SZA", "BP", "BP", "SZA", "SZA", "SZ", "SZ",
  "SZ", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP",
  "BP", "BP", "BP", "BP", "MOOD", "MOOD", "MOOD", "BP", "BP", "BP", "BP",
  "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "MOOD", "MOOD",
  "SZA", "SZA", "SZA", "SZ", "SZ", "SZ", "BP", "BP", "BP", "BP", "BP",
  "PSYCH", "PSYCH", "PSYCH", "MDD", "MDD", "BP", "BP", "BP", "SZA", "SZA",
  "SZA", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "BP", "BP", "BP", "BP",
  "BP", "BP", "MDD", "MDD", "MDD", "BP", "BP", "BP", "SZ", "SZ", "BP", "BP",
  "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "SZA", "SZA", "SZA",
  "BP", "BP", "BP", "BP", "BP", "SZ", "SZ", "PSYCH", "PSYCH", "PSYCH", "SZ",
  "SZ", "BP", "BP", "BP", "BP", "SZA", "SZA", "SZA", "BP", "BP", "BP", "MDD",
  "MDD", "MDD", "SZ", "SZ", "SZ", "MDD", "MDD", "SZ", "SZ", "SZ", "MDD",
  "MDD", "MDD", "BP", "BP", "BP", "MDD", "MDD", "MDD", "PTSD", "PTSD", "BP",
  "BP", "BP", "SZ", "SZ", "SZ", "PTSD", "PTSD", "PTSD", "PTSD", "PTSD",
  "PTSD", "PTSD", "PTSD", "PTSD", "MOOD", "MOOD", "MOOD", "BP", "BP", "BP",
  "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD",
  "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "BP", "BP", "BP",
  "MDD", "MDD", "MDD", "BP", "BP", "BP", "MDD", "MDD", "MDD", "BP", "BP",
  "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "SZ", "SZ",
  "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ", "SZ",
  "SZ", "SZ", "SZA", "SZA", "SZA", "BP", "BP", "BP", "BP", "BP", "BP", "SZA",
  "SZA", "SZA", "SZA", "SZA", "SZA", "PTSD", "PTSD", "PTSD", "PTSD", "BP", "BP",
  "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "SZA", "SZA", "SZA", "SZA",
  "PTSD", "PTSD", "PTSD", "MOOD", "MOOD", "MOOD", "MDD", "MDD", "MDD", "BP", "BP",
  "BP", "PTSD", "PTSD", "BP", "BP", "BP", "BP", "BP", "BP", "MDD", "MDD", "MDD", "PTSD",
  "PTSD", "PTSD", "PTSD", "BP", "BP", "PTSD", "PTSD", "PTSD", "MDD", "MDD", "SZA",
  "SZA", "SZA", "SZA", "PTSD", "PTSD", "PTSD", "PTSD", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "MDD", "MDD", "MDD", "PTSD", "PTSD", "PTSD", "PTSD", "PTSD", "PTSD", "PSYCH", "PSYCH", "PSYCH", "BP", "BP", "BP", "MDD", "MDD", "PTSD", "PTSD", "PTSD", "PTSD", "PTSD", "PTSD", "MDD", "MDD", "MDD", "MDD", "MDD", "BP", "BP", "SZA", "SZA", "SZA", "SZA", "SZA", "SZ", "PSYCH", "SZA", "SZA", "SZA", "BP", "BP", "BP", "SZ", "SZ", "BP", "BP", "BP", "SZA", "SZ", "SZA", "MDD", "BP", "BP", "SZA", "BP", "BP", "BP", "BP", "BP", "BP", "SZ", "SZA", "SZA", "SZA", "SZA", "SZA", "SZ", "SZ", "BP", "BP", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "BP", "BP", "SZA", "SZA", "BP", "BP", "BP", "BP", "SZ", "SZ", "SZ", "SZA", "SZ", "BP", "SZA", "SZA", "SZA", "SZA", "SZA", "SZA", "BP", "SZA", "BP", "BP", "BP", "SZA", "SZ", "SZ", "SZ", "BP", "BP", "MDD", "MDD", "MDD", "SZ",
  "SZ", "BP", "BP", "BP", "SZ", "BP", "BP", "BP", "SZ", "BP", "BP", "BP", "MDD", "MDD",
  "MDD", "SZ", "SZ", "SZ", "MDD", "SZA", "BP", "BP", "MDD", "MDD", "MDD", "MDD", "SZA",
  "SZ", "SZ", "BP", "BP", "BP", "BP", "MDD", "MDD", "MDD", "SZA", "SZA", "SZA", "SZ", "SZ",
  "SZ", "SZ", "MDD", "MDD", "MDD", "MOOD", "MOOD", "PTSD", "PTSD", "PTSD", "MDD", "SZ",
  "MDD", "MDD", "SZ", "SZ", "SZA", "SZA", "SZA", "BP", "PSYCH", "PTSD", "PTSD", "MDD",
  "SZA", "SZA", "SZA", "BP", "BP", "BP", "MDD", "MDD", "MDD", "PTSD", "PTSD", "SZA", "SZA",
  "SZA", "BP", "PTSD", "PTSD", "PTSD", "PTSD", "MDD", "SZ", "SZ", "SZ", "SZ", "PTSD",
  "MOOD", "MOOD", "MOOD", "SZ", "BP",
  "BP", "BP", "BP", "BP", "PTSD", "SZ", "SZ", "SZ", "SZ", "SZ", "BP", "BP", "SZ", "BP",
  "BP", "BP", "MDD", "MDD", "MDD", "PTSD", "BP", "BP", "BP", "MDD", "PTSD", "MDD", "MDD",
  "BP", "BP", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD", "MDD",
  "BP", "MDD", "MDD", "PTSD", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP", "PTSD", "PTSD",
  "PTSD", "PTSD", "MDD", "SZ", "MDD", "MDD"
)
patientid <- c(
  "phchp003", "phchp003", "phchp003", "phchp004", "phchp004", "phchp004", "phchp009", "phchp009", "phchp010", "phchp010",
  "phchp010", "phchp012", "phchp012", "phchp012", "phchp013", "phchp013", "phchp016", "phchp016", "phchp016", "phchp019", "phchp019", "phchp019", "phchp019", "phchp021", "phchp021", "phchp021", "phchp026", "phchp026", "phchp026", "phchp028", "phchp028", "phchp031", "phchp031", "phchp031", "phchp035", "phchp035", "phchp035", "phchp038", "phchp038", "phchp038", "phchp040", "phchp040", "phchp040", "phchp042", "phchp042", "phchp042", "phchp046", "phchp046", "phchp046", "phchp048", "phchp048", "phchp048", "phchp049", "phchp049", "phchp052", "phchp052", "phchp052", "phchp053", "phchp053", "phchp053", "phchp055", "phchp055", "phchp055", "phchp058", "phchp058", "phchp058", "phchp061", "phchp061", "phchp061", "phchp062", "phchp062", "phchp062", "phchp065", "phchp065", "phchp065", "phchp067", "phchp067", "phchp069", "phchp069", "phchp069", "phchp070", "phchp070", "phchp070", "phchp070", "phchp070", "phchp070", "phchp072", "phchp072", "phchp072", "phchp073", "phchp073", "phchp074", "phchp074", "phchp074", "phchp075", "phchp075", "phchp079", "phchp079", "phchp079", "phchp079", "phchp079", "phchp079", "phchp083", "phchp083", "phchp083", "phchp084", "phchp084", "phchp084", "phchp084", "phchp085", "phchp085", "phchp085", "phchp086", "phchp086", "phchp086", "phchp087", "phchp087", "phchp087", "phchp088", "phchp088", "phchp088", "phchp088", "phchp088", "phchp089", "phchp089", "phchp089", "phchp091", "phchp091", "phchp093", "phchp093", "phchp093", "phchp093", "phchp093", "phchp093", "phchp099", "phchp099", "phchp099", "phchp106", "phchp106", "phchp106", "phchp108", "phchp108", "phchp109", "phchp109", "phchp112", "phchp112", "phchp112", "phchp117", "phchp117", "phchp117", "phchp118", "phchp118", "phchp118", "phchp119", "phchp119", "phchp121", "phchp121", "phchp121", "phchp124", "phchp124", "phchp127", "phchp127", "phchp127", "phchp128", "phchp128", "phchp129", "phchp129", "phchp131", "phchp131", "phchp131", "phchp132", "phchp132", "phchp132", "phchp132", "phchp132", "phchp132", "phchp134", "phchp134", "phchp134", "phchp134", "phchp134", "phchp134", "phchp136", "phchp136", "phchp136", "phchp138", "phchp138", "phchp138", "phchp140", "phchp140", "phchp140", "phchp140", "phchp141", "phchp141", "phchp141", "phchp142", "phchp142", "phchp142", "phchp142", "phchp142", "phchp142", "phchp149", "phchp149", "phchp150", "phchp150", "phchp150", "phchp151", "phchp151", "phchp151", "phchp153", "phchp153", "phchp153", "phchp153", "phchp153", "phchp154", "phchp154", "phchp154", "phchp155", "phchp155", "phchp157", "phchp157", "phchp157", "phchp160", "phchp160", "phchp160", "phchp161", "phchp161", "phchp161", "phchp162", "phchp162", "phchp162", "phchp166", "phchp166", "phchp166", "phchp166", "phchp166", "phchp166", "phchp168", "phchp168", "phchp168", "phchp172", "phchp172", "phchp172", "phchp176", "phchp176", "phchp179", "phchp179", "phchp179", "phchp181", "phchp181", "phchp181", "phchp183", "phchp183", "phchp184", "phchp184", "phchp184", "phchp185", "phchp185", "phchp185", "phchp186", "phchp186", "phchp186", "phchp186", "phchp186", "phchp187", "phchp187", "phchp188", "phchp188", "phchp188", "phchp189", "phchp189", "phchp190", "phchp190", "phchp190", "phchp190", "phchp192", "phchp192", "phchp192", "phchp193", "phchp193", "phchp193", "phchp194", "phchp194", "phchp194", "phchp195", "phchp195", "phchp195",
  "phchp196", "phchp196", "phchp199", "phchp199", "phchp199", "phchp200", "phchp200", "phchp200", "phchp204", "phchp204", "phchp204", "phchp208", "phchp208", "phchp208", "phchp209", "phchp209", "phchp210", "phchp210", "phchp210", "phchp211", "phchp211", "phchp211", "phchp213", "phchp213", "phchp213", "phchp214", "phchp214", "phchp214", "phchp215", "phchp215", "phchp215", "phchp216", "phchp216", "phchp216", "phchp219", "phchp219", "phchp219", "phchp221", "phchp221", "phchp221", "phchp227", "phchp227", "phchp227", "phchp235", "phchp235", "phchp235",
  "phchp238", "phchp238", "phchp238", "phchp240", "phchp240", "phchp240", "phchp242", "phchp242", "phchp242", "phchp253", "phchp253", "phchp253", "phchp254", "phchp254", "phchp254", "phchp258", "phchp258", "phchp258", "phchp259", "phchp259", "phchp259", "phchp270", "phchp270", "phchp270", "phchp270", "phchp270", "phchp270", "phchp273", "phchp273",
  "phchp274", "phchp274", "phchp274", "phchp274", "phchp275", "phchp275", "phchp276", "phchp276", "phchp276", "phchp277",
  "phchp277", "phchp277", "phchp277", "phchp277", "phchp279", "phchp279", "phchp279", "phchp282", "phchp282", "phchp282", "phchp282", "phchp287", "phchp287", "phchp287", "phchp290", "phchp290", "phchp290", "phchp292", "phchp292", "phchp292", "phchp297", "phchp297", "phchp297", "phchp298", "phchp298", "phchp298", "phchp299", "phchp299", "phchp299",
  "phchp299", "phchp300", "phchp300", "phchp300", "phchp300", "phchp300", "phchp300", "phchp302", "phchp302", "phchp302", "phchp302", "phchp302", "phchp308", "phchp308", "phchp308", "phchp308", "phchp309", "phchp309", "phchp309", "phchp310", "phchp310", "phchp310", "phchp311", "phchp311", "phchp311", "phchp312", "phchp312", "phchp312", "phchp313", "phchp313", "phchp316", "phchp316", "phchp316", "phchp316", "phchp316", "phchp316", "phchp318", "phchp318", "phchp318", "phchp319", "phchp319", "phchp319", "phchp319", "phchp320", "phchp320", "phchp325", "phchp325", "phchp325", "phchp328", "phchp328", "phchp329", "phchp329", "phchp332", "phchp332", "phchp333", "phchp333", "phchp333", "phchp333", "phchp334", "phchp334", "phchp334", "phchp338", "phchp338", "phchp338", "phchp338", "phchp342", "phchp342", "phchp342", "phchp345", "phchp345", "phchp345", "phchp346", "phchp346", "phchp346", "phchp349", "phchp349", "phchp349", "phchp350", "phchp350", "phchp350",
  "phchp355", "phchp355", "phchp358", "phchp358", "phchp358", "phchp359", "phchp359", "phchp359", "phchp362", "phchp362", "phchp362", "phchp363", "phchp363", "phchp367", "phchp367", "phchp005", "phchp005", "phchp005", "phchp006", "phchp006", "phchp008", "phchp014", "phchp017", "phchp017", "phchp018", "phchp020", "phchp020", "phchp020", "phchp022", "phchp022", "phchp023", "phchp023", "phchp023", "phchp024", "phchp025", "phchp027", "phchp029", "phchp030", "phchp030", "phchp033", "phchp034", "phchp034", "phchp034", "phchp037", "phchp039", "phchp039", "phchp041", "phchp047", "phchp047", "phchp047", "phchp051", "phchp057", "phchp060", "phchp063", "phchp064", "phchp064", "phchp068", "phchp068", "phchp068", "phchp071", "phchp076", "phchp076", "phchp076", "phchp078",
  "phchp080", "phchp081", "phchp081", "phchp092", "phchp092", "phchp092", "phchp094", "phchp096", "phchp096", "phchp096", "phchp097", "phchp098", "phchp100", "phchp101", "phchp102", "phchp102", "phchp102", "phchp103", "phchp105", "phchp113", "phchp114", "phchp115", "phchp115", "phchp115", "phchp116", "phchp120", "phchp120", "phchp120", "phchp122", "phchp122", "phchp130", "phchp130", "phchp130", "phchp133", "phchp139", "phchp143", "phchp143", "phchp143", "phchp144", "phchp147", "phchp147", "phchp147", "phchp148", "phchp152", "phchp156", "phchp158", "phchp164", "phchp164", "phchp164", "phchp165", "phchp165", "phchp165", "phchp167", "phchp169", "phchp171", "phchp171", "phchp173", "phchp173", "phchp173", "phchp174", "phchp175", "phchp177", "phchp177", "phchp178", "phchp180", "phchp180", "phchp180", "phchp182", "phchp182", "phchp182", "phchp191", "phchp191", "phchp191", "phchp197", "phchp197", "phchp197", "phchp197", "phchp198", "phchp198", "phchp198", "phchp203", "phchp203", "phchp205", "phchp205", "phchp205", "phchp206", "phchp207", "phchp212", "phchp212", "phchp222", "phchp222", "phchp223", "phchp223", "phchp223",
  "phchp224", "phchp225", "phchp228", "phchp229", "phchp231", "phchp232", "phchp232", "phchp232", "phchp234", "phchp234", "phchp234", "phchp236", "phchp236", "phchp236", "phchp237", "phchp237", "phchp239", "phchp239", "phchp239", "phchp241", "phchp243", "phchp243", "phchp243", "phchp243", "phchp247", "phchp248", "phchp248", "phchp248", "phchp248", "phchp265",
  "phchp266", "phchp266", "phchp266", "phchp283", "phchp285", "phchp285", "phchp286", "phchp286", "phchp286", "phchp289", "phchp291", "phchp291", "phchp291", "phchp291", "phchp291", "phchp293", "phchp293", "phchp295", "phchp296", "phchp296", "phchp296", "phchp304", "phchp304", "phchp304", "phchp307", "phchp314", "phchp314", "phchp314", "phchp315", "phchp323", "phchp324", "phchp327", "phchp330", "phchp331", "phchp336", "phchp336", "phchp340", "phchp340", "phchp341", "phchp341", "phchp341", "phchp341", "phchp343", "phchp343", "phchp343", "phchp348", "phchp351", "phchp351", "phchp353", "phchp356", "phchp357", "phchp357", "phchp357", "phchp357", "phchp357", "phchp360", "phchp360", "phchp361", "phchp361", "phchp361", "phchp364",
  "phchp365", "phchp366", "phchp368", "phchp368"
)
```

## Data cleaning

Extract only data for every patient once.

```{r}
diagn <- as.factor(diagnosis[!duplicated(patientid)])
summary(diagn)
```

We will only use BP, MDD, SZ, and SZA as MOOD and PSYCH have very small n.

```{r}
DATA <- CANVAS[!duplicated(patientid)]
DATA <- DATA[-54676, ] # remove last row of missing values: control probeset
```

Transpose + standardize data

```{r}
BP <- as.matrix(log2(DATA[, diagn == "BP"]))
Ivec <- c(dim(BP)[2])
BP <- scale(t(BP), center = TRUE, scale = TRUE)
BP_singvals <- svd(BP)$d

MDD <- as.matrix(log2(DATA[, diagn == "MDD"]))
Ivec <- c(Ivec, dim(MDD)[2])
MDD <- scale(t(MDD), center = TRUE, scale = TRUE)
MDD_singvals <- svd(MDD)$d

SZA <- as.matrix(log2(DATA[, diagn == "SZA"]))
Ivec <- c(Ivec, dim(SZA)[2])
SZA <- scale(t(SZA), center = TRUE, scale = TRUE)
SZA_singvals <- svd(SZA)$d

SZ <- as.matrix(log2(DATA[, diagn == "SZ"]))
Ivec <- c(Ivec, dim(SZ)[2])
SZ <- scale(t(SZ), center = TRUE, scale = TRUE)
SZ_singvals <- svd(SZ)$d

DATA <- rbind(BP, MDD, SZA, SZ)
```

## Exploration

Generate scree plots of singular values:

```{r}
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2))
plot(BP_singvals[1:25])
plot(MDD_singvals[1:25])
plot(SZA_singvals[1:25])
plot(SZ_singvals[1:25])
```

```{r}
fa.parallel(DATA[, 1:5000], error.bars = T, se.bars = T, fm = "ml")
```

No result obtained and this is not yet full set of variables.

```{r}
plot(svd(DATA)$d)
```

Retain 3 factors as seems to be needed for one group.

```{r}
J <- dim(BP)[2]
DisorderDATA <- list(BP[, 1:J], MDD[, 1:J], SZA[, 1:J], SZ[, 1:J])
R <- 3
G <- 4
```

# Modelling with fusion

## Imports

```{r}
# load needed functions
source("../R/initial-loadings.R")
source("../R/multistart.R")
source("../R/pstr.R")
source("../R/joint-spca-finalizing.R")
source("../R/is-jspca.R")
source("../R/seqstrategy.R")
source("../R/performance-measures.R")

# load MASS
library(MASS)
```

## Set seed

```{r}
set.seed(54321)
```

## Fitting the model

Fit models with more and more fusion to investigate fusion paths.

```{r}
CONSENSUS <- MULTISTART(DATA = DisorderDATA, R, CARD = J * R, LAMBDA = 0.2, SP = seq(0.1, 0.9, by = 0.1), ALPH = 0, MAXITER = 20, EPS = 1e-4)
save(CONSENSUS, file = "GeneticDataGeneratedFiles/consenses_genetic.RData")
```

```{r}
MODELS <- c()
FA1 <- c()
FA2 <- c()
FA3 <- c()
# lambdavec <- c(1e-4,1e-3,0.005,0.0075,0.01,0.02,0.025,0.05,0.1) #highest value = diff of this size is fused
lambdavec <- c(0.1, 0.05, 0.025, 0.01, 0.005, 1e-4)
refloadings <- CONSENSUS$loadings
FA1 <- cbind(FA1, refloadings[[1]][, 1], refloadings[[2]][, 1], refloadings[[3]][, 1], refloadings[[4]][, 1])
FA2 <- cbind(FA2, refloadings[[1]][, 2], refloadings[[2]][, 2], refloadings[[3]][, 2], refloadings[[4]][, 2])
FA3 <- cbind(FA3, refloadings[[1]][, 3], refloadings[[2]][, 3], refloadings[[3]][, 3], refloadings[[4]][, 3])
refloadings <- refloadings[[1]]
for (l in 1:length(lambdavec)) {
  model <- MULTISTART(DATA = DisorderDATA, R, CARD = J * R, LAMBDA = lambdavec[l], SP = seq(0.1, 0.9, by = 0.3), ALPH = 0, MAXITER = 20, EPS = 1e-4)
  MODELS <- cbind(MODELS, model$loadings)
  perm <- gtools::permutations(R, R)
  absdiff <- c()
  for (p in 1:nrow(perm)) {
    # P1
    corsign <- sign(diag(cor(refloadings, model$loadings[[1]][, perm[p, ]])))
    L1 <- (model$loadings[[1]][, perm[p, ]]) %*% diag(corsign)
    absdiff <- c(absdiff, sum(rowSums(abs(refloadings - L1))))
  }
  bestperm <- which.min(absdiff)
  model$loadings[[1]] <- model$loadings[[1]][, perm[bestperm, ]]
  model$loadings[[2]] <- model$loadings[[2]][, perm[bestperm, ]]
  model$loadings[[3]] <- model$loadings[[3]][, perm[bestperm, ]]
  model$loadings[[4]] <- model$loadings[[4]][, perm[bestperm, ]]
  FA1 <- cbind(FA1, model$loadings[[1]][, 1], model$loadings[[2]][, 1], model$loadings[[3]][, 1], model$loadings[[4]][, 1])
  FA2 <- cbind(FA2, model$loadings[[1]][, 2], model$loadings[[2]][, 2], model$loadings[[3]][, 2], model$loadings[[4]][, 2])
  FA3 <- cbind(FA3, model$loadings[[1]][, 3], model$loadings[[2]][, 3], model$loadings[[3]][, 3], model$loadings[[4]][, 3])
}
save(FA1, FA2, FA3, file = "GeneticDataGeneratedFiles/loadings_genetic.RData")
```

# Geneset enrichment analysis

Part 1

-   Reformat data table to obtain data.frames with 2 variables: GeneID (GENE SYMBOLS from hgu133plus) and value = scores. In this analysis we are only using the GeneID value.

-   eliminate probesets that are not annotated ('NA') .

-   summarize genes appearing more than once in the list usign the median score.

## Imports

```{r}
library(tmod)
library(dplyr)
library(stringr)
library(tibble)
```

Get official gene symbols: TAKES SOME TIME!

```{r}
if (!require("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}
BiocManager::install(version = "3.20")
BiocManager::install("hgu133plus2.db")
BiocManager::install("annotate")
library(annotate)
library("hgu133plus2.db")
```

```{r}
x <- hgu133plus2SYMBOL # ADAPT IF NEEDED
symbolall <- Lkeys(x)
for (i in 1:length(symbolall))
{
  symbolall[i] <- get(symbolall[i], env = hgu133plus2SYMBOL)
}
```

symbolall contains the official gene symbols in the order of the data.

## Loading the data

```{r}
load("GeneticDataGeneratedFiles/consenses_genetic.RData")
load("GeneticDataGeneratedFiles/loadings_genetic.RData")
x <- sort(CONSENSUS$loadings[[1]][, 1], index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]
```

## Analysis

Use tmod package; note focus on immune related processes.

```{r}
res <- tmodCERNOtest(gene_list)
res
```

Not much found ... focus on genes showing measurement noninvariance.

```{r}
cbind(CONSENSUS$loadings[[1]][, 1], FA2)
```

### Calculate Eucledean Distance between all pairs

```{r}
idx <- seq(1, dim(FA1)[2], by = 4)
```

```{r}
d_BP_MDD <- 0
BPvsMDD <- rowSums(abs(FA2[, idx] - FA2[, (idx + 1)]))
mean(BPvsMDD)
d_BP_MDD <- d_BP_MDD + mean(BPvsMDD)

# prepare input for tmod package
x <- sort(BPvsMDD, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]

# use tmod package; note focus on immune related processes
res_BP_MDD <- tmodCERNOtest(gene_list)
res_BP_MDD
```

```{r}
d_BP_SZA <- 0
BPvsSZA <- rowSums(abs(FA1[, idx] - FA1[, (idx + 2)]))
mean(BPvsSZA)
d_BP_SZA <- d_BP_SZA + mean(BPvsSZA)
# prepare input for tmod package
x <- sort(BPvsSZA, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]
# use tmod package; note focus on immune related processes
res_BP_SZA <- tmodCERNOtest(gene_list)
res_BP_SZA
```

```{r}
d_BPvsSZ <- 0
BPvsSZ <- rowSums(abs(FA2[, idx] - FA2[, (idx + 3)]))
mean(BPvsSZ)
d_BPvsSZ <- d_BPvsSZ + mean(BPvsSZ)
# prepare input for tmod package
x <- sort(BPvsSZ, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]
# use tmod package; note focus on immune related processes
res_BP_SZ <- tmodCERNOtest(gene_list)
res_BP_SZ
```

```{r}
d_MDDvsSZA <- 0
MDDvsSZA <- rowSums(abs(FA3[, (idx + 1)] - FA3[, (idx + 2)]))
mean(MDDvsSZA)
d_MDDvsSZA <- d_MDDvsSZA + mean(MDDvsSZA)
# prepare input for tmod package
x <- sort(MDDvsSZA, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]
# use tmod package; note focus on immune related processes
res_MDD_SZA <- tmodCERNOtest(gene_list)
res_MDD_SZA
```

```{r}
d_MDDvsSZ <- 0
MDDvsSZ <- rowSums(abs(FA1[, (idx + 1)] - FA1[, (idx + 3)]))
mean(MDDvsSZ)
d_MDDvsSZA <- d_MDDvsSZ + mean(MDDvsSZ)
# prepare input for tmod package
x <- sort(MDDvsSZ, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]
# use tmod package; note focus on immune related processes
res_MDD_SZ <- tmodCERNOtest(gene_list)
res_MDD_SZ
```

```{r}
d_SZAvsSZ <- 0
SZAvsSZ <- rowSums(abs(FA1[, (idx + 2)] - FA1[, (idx + 3)]))
mean(SZAvsSZ)
d_SZAvsSZ <- d_SZAvsSZ + mean(SZAvsSZ)
# prepare input for tmod package
x <- sort(SZAvsSZ, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]
# use tmod package; note focus on immune related processes
res_SZA_SZ <- tmodCERNOtest(gene_list)
res_SZA_SZ
```

```{r}
symbolall[SZAvsSZ > 4]
```

### GSEA for differentially expressed genes

```{r}
x <- sort(MDDvsSZA, index.return = T, decreasing = T)
gene_list <- symbolall[x$ix]

# use tmod package; note focus on immune related processes
res <- tmodCERNOtest(gene_list)
res
```

```{r}
BP[, 1:J]
```

```{r}
MDD[, 1:J]
```

```{r}
SZA[, 1:J]
```

```{r}
SZ[, 1:J]
```
